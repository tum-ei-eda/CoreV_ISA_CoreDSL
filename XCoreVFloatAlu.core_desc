import "../rv_base/RVF.core_desc"

InstructionSet XCoreVAlu extends RV32F {
    functions {
        extern unsigned<32> fabs_s(unsigned<32>, unsigned<32>);
        extern unsigned<1> flet_s(unsigned<32>, unsigned<32>);
        extern unsigned<1> flet_u(unsigned<32>, unsigned<32>);
        extern unsigned<32> fmin_s(unsigned<32>, unsigned<32>);
        extern unsigned<32> fmin_u(unsigned<32>, unsigned<32>);
    }
    instructions {
        // SOURCE FILE: instr_srcs/XCoreVALU1.txt
        CVF_ABS {
            encoding: 7'b0101000 :: 5'b00000 :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // update opcode!
            assembly: {"cvf.abs", "{name(rd)}, {name(rs1)}" };
            behavior: {
                F[rd] =  fabs_s(F[rs1]);
            }
        }
        CVF_SLET {
            encoding: 7'b0101001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.slet", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] = flet_s(F[rs1], F[rs2]);
            }
        }
        CVF_SLETU {
            encoding: 7'b0101010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.sletu", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] = flet_u(F[rs1], F[rs2]);
            }
        }
        CVF_MIN {
            encoding: 7'b0101011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.min", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] =  fmin_s(F[rs1], F[rs2]);
            }
        }
        CVF_MINU {
            encoding: 7'b0101100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.minu", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] =  fmin_u(F[rs1], F[rs2]);
            }
        }
        CVF_MAX {
            encoding: 7'b0101101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.max", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] =  fmax_s(F[rs1], F[rs2]);
            }
        }
        CVF_MAXU {
            encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.maxu", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                F[rd] =  fmax_u(F[rs1], F[rs2]);
            }
        }
        CVF_CLIPR {
            encoding: 7'b0111010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.clipr", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
            }
        }
        CVF_CLIPUR {
            encoding: 7'b0111011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.clipur", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
            }
        }
    }
}
