InstructionSet XCoreVSimd extends RISCVBase {
    instructions {
        // SOURCE FILE: instr_srcs/XCoreVSIMD_ALU.txt
        CV_ADD_H {
            encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] + X[rs2][15: 0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] + X[rs2][31:16])[15:0];
                }
            }
        }
        CV_ADD_SC_H {
            encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] + X[rs2][15:0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] + X[rs2][15:0])[15:0];
                }
            }
        }
        CV_ADD_SCI_H {
            encoding: 5'b00000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] + ((unsigned<16>)((signed)Imm6)))[15:0];
                    X[rd][31:16] = (X[rs1][31:16] + ((unsigned<16>)((signed)Imm6)))[15:0];
                }
            }
        }
        CV_ADD_B {
            encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] + X[rs2][ 7: 0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] + X[rs2][15: 8])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] + X[rs2][23:16])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] + X[rs2][31:24])[7:0];
                }
            }
        }
        CV_ADD_SC_B {
            encoding: 5'b00000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] + X[rs2][7:0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] + X[rs2][7:0])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] + X[rs2][7:0])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] + X[rs2][7:0])[7:0];
                }
            }
        }
        CV_ADD_SCI_B {
            encoding: 5'b00000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] + ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] + ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][23:16] = (X[rs1][23:16] + ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][31:24] = (X[rs1][31:24] + ((unsigned<8>)((signed)Imm6)))[7:0];
                }
            }
        }
        CV_SUB_H {
            encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] - X[rs2][15: 0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] - X[rs2][31:16])[15:0];
                }
            }
        }
        CV_SUB_SC_H {
            encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] - X[rs2][15:0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] - X[rs2][15:0])[15:0];
                }
            }
        }
        CV_SUB_SCI_H {
            encoding: 5'b00001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] - ((unsigned<16>)((signed)Imm6)))[15:0];
                    X[rd][31:16] = (X[rs1][31:16] - ((unsigned<16>)((signed)Imm6)))[15:0];
                }
            }
        }
        CV_SUB_B {
            encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] - X[rs2][ 7: 0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] - X[rs2][15: 8])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] - X[rs2][23:16])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] - X[rs2][31:24])[7:0];
                }
            }
        }
        CV_SUB_SC_B {
            encoding: 5'b00001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] - X[rs2][7:0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] - X[rs2][7:0])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] - X[rs2][7:0])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] - X[rs2][7:0])[7:0];
                }
            }
        }
        CV_SUB_SCI_B {
            encoding: 5'b00001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] - ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] - ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][23:16] = (X[rs1][23:16] - ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][31:24] = (X[rs1][31:24] - ((unsigned<8>)((signed)Imm6)))[7:0];
                }
            }
        }
        CV_AVG_H {
            encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
                }
            }
        }
        CV_AVG_SC_H {
            encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15:0]) >> 1)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][15:0]) >> 1)[15:0];
                }
            }
        }
        CV_AVG_SCI_H {
            encoding: 5'b00010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + ((unsigned<16>)((signed)Imm6))) >> 1)[15:0];
                }
            }
        }
        CV_AVG_B {
            encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + X[rs2][ 7: 0]) >> 1)[7:0];
                    X[rd][15: 8] = ((signed)(X[rs1][15: 8] + X[rs2][15: 8]) >> 1)[7:0];
                    X[rd][23:16] = ((signed)(X[rs1][23:16] + X[rs2][23:16]) >> 1)[7:0];
                    X[rd][31:24] = ((signed)(X[rs1][31:24] + X[rs2][31:24]) >> 1)[7:0];
                }
            }
        }
        CV_AVG_SC_B {
            encoding: 5'b00010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][15: 8] = ((signed)(X[rs1][15: 8] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][23:16] = ((signed)(X[rs1][23:16] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][31:24] = ((signed)(X[rs1][31:24] + X[rs2][7:0]) >> 1)[7:0];
                }
            }
        }
        CV_AVG_SCI_B {
            encoding: 5'b00010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avg.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)(X[rs1][ 7: 0] + ((unsigned<8>)((signed)Imm6))) >> 1)[7:0];
                    X[rd][15: 8] = ((signed)(X[rs1][15: 8] + ((unsigned<8>)((signed)Imm6))) >> 1)[7:0];
                    X[rd][23:16] = ((signed)(X[rs1][23:16] + ((unsigned<8>)((signed)Imm6))) >> 1)[7:0];
                    X[rd][31:24] = ((signed)(X[rs1][31:24] + ((unsigned<8>)((signed)Imm6))) >> 1)[7:0];
                }
            }
        }
        CV_AVGU_H {
            encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
                    X[rd][31:16] = ((unsigned)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
                }
            }
        }
        CV_AVGU_SC_H {
            encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + X[rs2][15:0]) >> 1)[15:0];
                    X[rd][31:16] = ((unsigned)(X[rs1][31:16] + X[rs2][15:0]) >> 1)[15:0];
                }
            }
        }
        CV_AVGU_SCI_H {
            encoding: 5'b00011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)(X[rs1][15: 0] + ((unsigned<16>)Imm6)) >> 1)[15:0];
                    X[rd][31:16] = ((unsigned)(X[rs1][31:16] + ((unsigned<16>)Imm6)) >> 1)[15:0];
                }
            }
        }
        CV_AVGU_B {
            encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + X[rs2][ 7: 0]) >> 1)[7:0];
                    X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + X[rs2][15: 8]) >> 1)[7:0];
                    X[rd][23:16] = ((unsigned)(X[rs1][23:16] + X[rs2][23:16]) >> 1)[7:0];
                    X[rd][31:24] = ((unsigned)(X[rs1][31:24] + X[rs2][31:24]) >> 1)[7:0];
                }
            }
        }
        CV_AVGU_SC_B {
            encoding: 5'b00011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][23:16] = ((unsigned)(X[rs1][23:16] + X[rs2][7:0]) >> 1)[7:0];
                    X[rd][31:24] = ((unsigned)(X[rs1][31:24] + X[rs2][7:0]) >> 1)[7:0];
                }
            }
        }
        CV_AVGU_SCI_B {
            encoding: 5'b00011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.avgu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)(X[rs1][ 7: 0] + ((unsigned<8>)Imm6)) >> 1)[7:0];
                    X[rd][15: 8] = ((unsigned)(X[rs1][15: 8] + ((unsigned<8>)Imm6)) >> 1)[7:0];
                    X[rd][23:16] = ((unsigned)(X[rs1][23:16] + ((unsigned<8>)Imm6)) >> 1)[7:0];
                    X[rd][31:24] = ((unsigned)(X[rs1][31:24] + ((unsigned<8>)Imm6)) >> 1)[7:0];
                }
            }
        }
        CV_MIN_H {
            encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] < (signed)X[rs2][15: 0]) ? X[rs1][15: 0] : X[rs2][15: 0];
                    X[rd][31:16] = ((signed)X[rs1][31:16] < (signed)X[rs2][31:16]) ? X[rs1][31:16] : X[rs2][31:16];
                }
            }
        }
        CV_MIN_SC_H {
            encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] < (signed)X[rs2][15:0]) ? X[rs1][15: 0] : X[rs2][15:0];
                    X[rd][31:16] = ((signed)X[rs1][31:16] < (signed)X[rs2][15:0]) ? X[rs1][31:16] : X[rs2][15:0];
                }
            }
        }
        CV_MIN_SCI_H {
            encoding: 5'b00100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] < (signed)((unsigned<16>)((signed)Imm6))) ? X[rs1][15: 0] : ((unsigned<16>)((signed)Imm6));
                    X[rd][31:16] = ((signed)X[rs1][31:16] < (signed)((unsigned<16>)((signed)Imm6))) ? X[rs1][31:16] : ((unsigned<16>)((signed)Imm6));
                }
            }
        }
        CV_MIN_B {
            encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] < (signed)X[rs2][ 7: 0]) ? X[rs1][ 7: 0] : X[rs2][ 7: 0];
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] < (signed)X[rs2][15: 8]) ? X[rs1][15: 8] : X[rs2][15: 8];
                    X[rd][23:16] = ((signed)X[rs1][23:16] < (signed)X[rs2][23:16]) ? X[rs1][23:16] : X[rs2][23:16];
                    X[rd][31:24] = ((signed)X[rs1][31:24] < (signed)X[rs2][31:24]) ? X[rs1][31:24] : X[rs2][31:24];
                }
            }
        }
        CV_MIN_SC_B {
            encoding: 5'b00100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] < (signed)X[rs2][7:0]) ? X[rs1][ 7: 0] : X[rs2][7:0];
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] < (signed)X[rs2][7:0]) ? X[rs1][15: 8] : X[rs2][7:0];
                    X[rd][23:16] = ((signed)X[rs1][23:16] < (signed)X[rs2][7:0]) ? X[rs1][23:16] : X[rs2][7:0];
                    X[rd][31:24] = ((signed)X[rs1][31:24] < (signed)X[rs2][7:0]) ? X[rs1][31:24] : X[rs2][7:0];
                }
            }
        }
        CV_MIN_SCI_B {
            encoding: 5'b00100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.min.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] < (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][ 7: 0] : ((unsigned<8>)((signed)Imm6));
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] < (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][15: 8] : ((unsigned<8>)((signed)Imm6));
                    X[rd][23:16] = ((signed)X[rs1][23:16] < (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][23:16] : ((unsigned<8>)((signed)Imm6));
                    X[rd][31:24] = ((signed)X[rs1][31:24] < (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][31:24] : ((unsigned<8>)((signed)Imm6));
                }
            }
        }
        CV_MINU_H {
            encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15: 0]) ? X[rs1][15: 0] : X[rs2][15: 0];
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] < (unsigned)X[rs2][31:16]) ? X[rs1][31:16] : X[rs2][31:16];
                }
            }
        }
        CV_MINU_SC_H {
            encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15:0]) ? X[rs1][15: 0] : X[rs2][15:0];
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] < (unsigned)X[rs2][15:0]) ? X[rs1][31:16] : X[rs2][15:0];
                }
            }
        }
        CV_MINU_SCI_H {
            encoding: 5'b00101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] < (unsigned)((unsigned<16>)Imm6)) ? X[rs1][15: 0] : ((unsigned<16>)Imm6);
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] < (unsigned)((unsigned<16>)Imm6)) ? X[rs1][31:16] : ((unsigned<16>)Imm6);
                }
            }
        }
        CV_MINU_B {
            encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][ 7: 0]) ? X[rs1][ 7: 0] : X[rs2][ 7: 0];
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][15: 8]) ? X[rs1][15: 8] : X[rs2][15: 8];
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] < (unsigned)X[rs2][23:16]) ? X[rs1][23:16] : X[rs2][23:16];
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] < (unsigned)X[rs2][31:24]) ? X[rs1][31:24] : X[rs2][31:24];
                }
            }
        }
        CV_MINU_SC_B {
            encoding: 5'b00101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][7:0]) ? X[rs1][ 7: 0] : X[rs2][7:0];
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][7:0]) ? X[rs1][15: 8] : X[rs2][7:0];
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] < (unsigned)X[rs2][7:0]) ? X[rs1][23:16] : X[rs2][7:0];
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] < (unsigned)X[rs2][7:0]) ? X[rs1][31:24] : X[rs2][7:0];
                }
            }
        }
        CV_MINU_SCI_B {
            encoding: 5'b00101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.minu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] < (unsigned)((unsigned<8>)Imm6)) ? X[rs1][ 7: 0] : ((unsigned<8>)Imm6);
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] < (unsigned)((unsigned<8>)Imm6)) ? X[rs1][15: 8] : ((unsigned<8>)Imm6);
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] < (unsigned)((unsigned<8>)Imm6)) ? X[rs1][23:16] : ((unsigned<8>)Imm6);
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] < (unsigned)((unsigned<8>)Imm6)) ? X[rs1][31:24] : ((unsigned<8>)Imm6);
                }
            }
        }
        CV_MAX_H {
            encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] > (signed)X[rs2][15: 0]) ? X[rs1][15: 0] : X[rs2][15: 0];
                    X[rd][31:16] = ((signed)X[rs1][31:16] > (signed)X[rs2][31:16]) ? X[rs1][31:16] : X[rs2][31:16];
                }
            }
        }
        CV_MAX_SC_H {
            encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] > (signed)X[rs2][15:0]) ? X[rs1][15: 0] : X[rs2][15:0];
                    X[rd][31:16] = ((signed)X[rs1][31:16] > (signed)X[rs2][15:0]) ? X[rs1][31:16] : X[rs2][15:0];
                }
            }
        }
        CV_MAX_SCI_H {
            encoding: 5'b00110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] > (signed)((unsigned<16>)((signed)Imm6))) ? X[rs1][15: 0] : ((unsigned<16>)((signed)Imm6));
                    X[rd][31:16] = ((signed)X[rs1][31:16] > (signed)((unsigned<16>)((signed)Imm6))) ? X[rs1][31:16] : ((unsigned<16>)((signed)Imm6));
                }
            }
        }
        CV_MAX_B {
            encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] > (signed)X[rs2][ 7: 0]) ? X[rs1][ 7: 0] : X[rs2][ 7: 0];
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] > (signed)X[rs2][15: 8]) ? X[rs1][15: 8] : X[rs2][15: 8];
                    X[rd][23:16] = ((signed)X[rs1][23:16] > (signed)X[rs2][23:16]) ? X[rs1][23:16] : X[rs2][23:16];
                    X[rd][31:24] = ((signed)X[rs1][31:24] > (signed)X[rs2][31:24]) ? X[rs1][31:24] : X[rs2][31:24];
                }
            }
        }
        CV_MAX_SC_B {
            encoding: 5'b00110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] > (signed)X[rs2][7:0]) ? X[rs1][ 7: 0] : X[rs2][7:0];
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] > (signed)X[rs2][7:0]) ? X[rs1][15: 8] : X[rs2][7:0];
                    X[rd][23:16] = ((signed)X[rs1][23:16] > (signed)X[rs2][7:0]) ? X[rs1][23:16] : X[rs2][7:0];
                    X[rd][31:24] = ((signed)X[rs1][31:24] > (signed)X[rs2][7:0]) ? X[rs1][31:24] : X[rs2][7:0];
                }
            }
        }
        CV_MAX_SCI_B {
            encoding: 5'b00110 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.max.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] > (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][ 7: 0] : ((unsigned<8>)((signed)Imm6));
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] > (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][15: 8] : ((unsigned<8>)((signed)Imm6));
                    X[rd][23:16] = ((signed)X[rs1][23:16] > (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][23:16] : ((unsigned<8>)((signed)Imm6));
                    X[rd][31:24] = ((signed)X[rs1][31:24] > (signed)((unsigned<8>)((signed)Imm6))) ? X[rs1][31:24] : ((unsigned<8>)((signed)Imm6));
                }
            }
        }
        CV_MAXU_H {
            encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15: 0]) ? X[rs1][15: 0] : X[rs2][15: 0];
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] > (unsigned)X[rs2][31:16]) ? X[rs1][31:16] : X[rs2][31:16];
                }
            }
        }
        CV_MAXU_SC_H {
            encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15:0]) ? X[rs1][15: 0] : X[rs2][15:0];
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] > (unsigned)X[rs2][15:0]) ? X[rs1][31:16] : X[rs2][15:0];
                }
            }
        }
        CV_MAXU_SCI_H {
            encoding: 5'b00111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((unsigned)X[rs1][15: 0] > (unsigned)((unsigned<16>)Imm6)) ? X[rs1][15: 0] : ((unsigned<16>)Imm6);
                    X[rd][31:16] = ((unsigned)X[rs1][31:16] > (unsigned)((unsigned<16>)Imm6)) ? X[rs1][31:16] : ((unsigned<16>)Imm6);
                }
            }
        }
        CV_MAXU_B {
            encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][ 7: 0]) ? X[rs1][ 7: 0] : X[rs2][ 7: 0];
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][15: 8]) ? X[rs1][15: 8] : X[rs2][15: 8];
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] > (unsigned)X[rs2][23:16]) ? X[rs1][23:16] : X[rs2][23:16];
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] > (unsigned)X[rs2][31:24]) ? X[rs1][31:24] : X[rs2][31:24];
                }
            }
        }
        CV_MAXU_SC_B {
            encoding: 5'b00111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][7:0]) ? X[rs1][ 7: 0] : X[rs2][7:0];
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][7:0]) ? X[rs1][15: 8] : X[rs2][7:0];
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] > (unsigned)X[rs2][7:0]) ? X[rs1][23:16] : X[rs2][7:0];
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] > (unsigned)X[rs2][7:0]) ? X[rs1][31:24] : X[rs2][7:0];
                }
            }
        }
        CV_MAXU_SCI_B {
            encoding: 5'b00111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.maxu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((unsigned)X[rs1][ 7: 0] > (unsigned)((unsigned<8>)Imm6)) ? X[rs1][ 7: 0] : ((unsigned<8>)Imm6);
                    X[rd][15: 8] = ((unsigned)X[rs1][15: 8] > (unsigned)((unsigned<8>)Imm6)) ? X[rs1][15: 8] : ((unsigned<8>)Imm6);
                    X[rd][23:16] = ((unsigned)X[rs1][23:16] > (unsigned)((unsigned<8>)Imm6)) ? X[rs1][23:16] : ((unsigned<8>)Imm6);
                    X[rd][31:24] = ((unsigned)X[rs1][31:24] > (unsigned)((unsigned<8>)Imm6)) ? X[rs1][31:24] : ((unsigned<8>)Imm6);
                }
            }
        }
        CV_SRL_H {
            encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15: 0]);
                    X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][31:16]);
                }
            }
        }
        CV_SRL_SC_H {
            encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (X[rs2][15:0]);
                    X[rd][31:16] = (unsigned)X[rs1][31:16] >> (X[rs2][15:0]);
                }
            }
        }
        CV_SRL_SCI_H {
            encoding: 5'b01000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] >> (((unsigned<16>)Imm6));
                    X[rd][31:16] = (unsigned)X[rs1][31:16] >> (((unsigned<16>)Imm6));
                }
            }
        }
        CV_SRL_B {
            encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][ 7: 0]);
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][15: 8]);
                    X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][23:16]);
                    X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][31:24]);
                }
            }
        }
        CV_SRL_SC_B {
            encoding: 5'b01000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (X[rs2][7:0]);
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (X[rs2][7:0]);
                    X[rd][23:16] = (unsigned)X[rs1][23:16] >> (X[rs2][7:0]);
                    X[rd][31:24] = (unsigned)X[rs1][31:24] >> (X[rs2][7:0]);
                }
            }
        }
        CV_SRL_SCI_B {
            encoding: 5'b01000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.srl.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] >> (((unsigned<8>)Imm6));
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] >> (((unsigned<8>)Imm6));
                    X[rd][23:16] = (unsigned)X[rs1][23:16] >> (((unsigned<8>)Imm6));
                    X[rd][31:24] = (unsigned)X[rs1][31:24] >> (((unsigned<8>)Imm6));
                }
            }
        }
        CV_SRA_H {
            encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (signed)X[rs1][15: 0] >> (X[rs2][15: 0]);
                    X[rd][31:16] = (signed)X[rs1][31:16] >> (X[rs2][31:16]);
                }
            }
        }
        CV_SRA_SC_H {
            encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (signed)X[rs1][15: 0] >> (X[rs2][15:0]);
                    X[rd][31:16] = (signed)X[rs1][31:16] >> (X[rs2][15:0]);
                }
            }
        }
        CV_SRA_SCI_H {
            encoding: 5'b01001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (signed)X[rs1][15: 0] >> (((unsigned<16>)Imm6));
                    X[rd][31:16] = (signed)X[rs1][31:16] >> (((unsigned<16>)Imm6));
                }
            }
        }
        CV_SRA_B {
            encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (X[rs2][ 7: 0]);
                    X[rd][15: 8] = (signed)X[rs1][15: 8] >> (X[rs2][15: 8]);
                    X[rd][23:16] = (signed)X[rs1][23:16] >> (X[rs2][23:16]);
                    X[rd][31:24] = (signed)X[rs1][31:24] >> (X[rs2][31:24]);
                }
            }
        }
        CV_SRA_SC_B {
            encoding: 5'b01001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (X[rs2][7:0]);
                    X[rd][15: 8] = (signed)X[rs1][15: 8] >> (X[rs2][7:0]);
                    X[rd][23:16] = (signed)X[rs1][23:16] >> (X[rs2][7:0]);
                    X[rd][31:24] = (signed)X[rs1][31:24] >> (X[rs2][7:0]);
                }
            }
        }
        CV_SRA_SCI_B {
            encoding: 5'b01001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sra.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (signed)X[rs1][ 7: 0] >> (((unsigned<8>)Imm6));
                    X[rd][15: 8] = (signed)X[rs1][15: 8] >> (((unsigned<8>)Imm6));
                    X[rd][23:16] = (signed)X[rs1][23:16] >> (((unsigned<8>)Imm6));
                    X[rd][31:24] = (signed)X[rs1][31:24] >> (((unsigned<8>)Imm6));
                }
            }
        }
        CV_SLL_H {
            encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] << (X[rs2][15: 0]);
                    X[rd][31:16] = (unsigned)X[rs1][31:16] << (X[rs2][31:16]);
                }
            }
        }
        CV_SLL_SC_H {
            encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] << (X[rs2][15:0]);
                    X[rd][31:16] = (unsigned)X[rs1][31:16] << (X[rs2][15:0]);
                }
            }
        }
        CV_SLL_SCI_H {
            encoding: 5'b01010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned)X[rs1][15: 0] << (((unsigned<16>)Imm6));
                    X[rd][31:16] = (unsigned)X[rs1][31:16] << (((unsigned<16>)Imm6));
                }
            }
        }
        CV_SLL_B {
            encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] << (X[rs2][ 7: 0]);
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] << (X[rs2][15: 8]);
                    X[rd][23:16] = (unsigned)X[rs1][23:16] << (X[rs2][23:16]);
                    X[rd][31:24] = (unsigned)X[rs1][31:24] << (X[rs2][31:24]);
                }
            }
        }
        CV_SLL_SC_B {
            encoding: 5'b01010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] << (X[rs2][7:0]);
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] << (X[rs2][7:0]);
                    X[rd][23:16] = (unsigned)X[rs1][23:16] << (X[rs2][7:0]);
                    X[rd][31:24] = (unsigned)X[rs1][31:24] << (X[rs2][7:0]);
                }
            }
        }
        CV_SLL_SCI_B {
            encoding: 5'b01010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sll.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned)X[rs1][ 7: 0] << (((unsigned<8>)Imm6));
                    X[rd][15: 8] = (unsigned)X[rs1][15: 8] << (((unsigned<8>)Imm6));
                    X[rd][23:16] = (unsigned)X[rs1][23:16] << (((unsigned<8>)Imm6));
                    X[rd][31:24] = (unsigned)X[rs1][31:24] << (((unsigned<8>)Imm6));
                }
            }
        }
        CV_OR_H {
            encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] | X[rs2][15: 0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] | X[rs2][31:16])[15:0];
                }
            }
        }
        CV_OR_SC_H {
            encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] | X[rs2][15:0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] | X[rs2][15:0])[15:0];
                }
            }
        }
        CV_OR_SCI_H {
            encoding: 5'b01011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] | ((unsigned<16>)((signed)Imm6)))[15:0];
                    X[rd][31:16] = (X[rs1][31:16] | ((unsigned<16>)((signed)Imm6)))[15:0];
                }
            }
        }
        CV_OR_B {
            encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] | X[rs2][ 7: 0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] | X[rs2][15: 8])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] | X[rs2][23:16])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] | X[rs2][31:24])[7:0];
                }
            }
        }
        CV_OR_SC_B {
            encoding: 5'b01011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] | X[rs2][7:0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] | X[rs2][7:0])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] | X[rs2][7:0])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] | X[rs2][7:0])[7:0];
                }
            }
        }
        CV_OR_SCI_B {
            encoding: 5'b01011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.or.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] | ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] | ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][23:16] = (X[rs1][23:16] | ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][31:24] = (X[rs1][31:24] | ((unsigned<8>)((signed)Imm6)))[7:0];
                }
            }
        }
        CV_XOR_H {
            encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] ^ X[rs2][15: 0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] ^ X[rs2][31:16])[15:0];
                }
            }
        }
        CV_XOR_SC_H {
            encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] ^ X[rs2][15:0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] ^ X[rs2][15:0])[15:0];
                }
            }
        }
        CV_XOR_SCI_H {
            encoding: 5'b01100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] ^ ((unsigned<16>)((signed)Imm6)))[15:0];
                    X[rd][31:16] = (X[rs1][31:16] ^ ((unsigned<16>)((signed)Imm6)))[15:0];
                }
            }
        }
        CV_XOR_B {
            encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ X[rs2][ 7: 0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] ^ X[rs2][15: 8])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] ^ X[rs2][23:16])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] ^ X[rs2][31:24])[7:0];
                }
            }
        }
        CV_XOR_SC_B {
            encoding: 5'b01100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ X[rs2][7:0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] ^ X[rs2][7:0])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] ^ X[rs2][7:0])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] ^ X[rs2][7:0])[7:0];
                }
            }
        }
        CV_XOR_SCI_B {
            encoding: 5'b01100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.xor.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] ^ ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] ^ ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][23:16] = (X[rs1][23:16] ^ ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][31:24] = (X[rs1][31:24] ^ ((unsigned<8>)((signed)Imm6)))[7:0];
                }
            }
        }
        CV_AND_H {
            encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] & X[rs2][15: 0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] & X[rs2][31:16])[15:0];
                }
            }
        }
        CV_AND_SC_H {
            encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] & X[rs2][15:0])[15:0];
                    X[rd][31:16] = (X[rs1][31:16] & X[rs2][15:0])[15:0];
                }
            }
        }
        CV_AND_SCI_H {
            encoding: 5'b01101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs1][15: 0] & ((unsigned<16>)((signed)Imm6)))[15:0];
                    X[rd][31:16] = (X[rs1][31:16] & ((unsigned<16>)((signed)Imm6)))[15:0];
                }
            }
        }
        CV_AND_B {
            encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] & X[rs2][ 7: 0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] & X[rs2][15: 8])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] & X[rs2][23:16])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] & X[rs2][31:24])[7:0];
                }
            }
        }
        CV_AND_SC_B {
            encoding: 5'b01101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] & X[rs2][7:0])[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] & X[rs2][7:0])[7:0];
                    X[rd][23:16] = (X[rs1][23:16] & X[rs2][7:0])[7:0];
                    X[rd][31:24] = (X[rs1][31:24] & X[rs2][7:0])[7:0];
                }
            }
        }
        CV_AND_SCI_B {
            encoding: 5'b01101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.and.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs1][ 7: 0] & ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][15: 8] = (X[rs1][15: 8] & ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][23:16] = (X[rs1][23:16] & ((unsigned<8>)((signed)Imm6)))[7:0];
                    X[rd][31:24] = (X[rs1][31:24] & ((unsigned<8>)((signed)Imm6)))[7:0];
                }
            }
        }
        CV_ABS_H {
            encoding: 5'b01110 :: 1'b0 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.abs.h", "{name(rd)}, {name(rs1)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)X[rs1][15: 0] < 0) ? (-X[rs1][15: 0])[16-1:0] : X[rs1][15: 0];
                    X[rd][31:16] = ((signed)X[rs1][31:16] < 0) ? (-X[rs1][31:16])[16-1:0] : X[rs1][31:16];
                }
            }
        }
        CV_ABS_B {
            encoding: 5'b01110 :: 1'b0 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.abs.b", "{name(rd)}, {name(rs1)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = ((signed)X[rs1][ 7: 0] < 0) ? (-X[rs1][ 7: 0])[8-1:0] : X[rs1][ 7: 0];
                    X[rd][15: 8] = ((signed)X[rs1][15: 8] < 0) ? (-X[rs1][15: 8])[8-1:0] : X[rs1][15: 8];
                    X[rd][23:16] = ((signed)X[rs1][23:16] < 0) ? (-X[rs1][23:16])[8-1:0] : X[rs1][23:16];
                    X[rd][31:24] = ((signed)X[rs1][31:24] < 0) ? (-X[rs1][31:24])[8-1:0] : X[rs1][31:24];
                }
            }
        }
        CV_EXTRACT_H {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.extract.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<32>)((signed)X[rs1][Imm6[0]*16 + 15 : Imm6[0]*16 ]);
                }
            }
        }
        CV_EXTRACT_B {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.extract.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<32>)((signed)X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ]);
                }
            }
        }
        CV_EXTRACTU_H {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.extractu.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<32>)(X[rs1][Imm6[0]*16 + 15 : Imm6[0]*16 ]);
                }
            }
        }
        CV_EXTRACTU_B {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.extractu.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<32>)(X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ]);
                }
            }
        }
        CV_INSERT_H {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.insert.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][Imm6[0]*16 + 15 : Imm6[0]*16 ] = X[rs1][15: 0];
                }
            }
        }
        CV_INSERT_B {
            encoding: 5'b10111 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.insert.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ] = X[rs1][ 7: 0];
                }
            }
        }
        CV_DOTUP_H {
            encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15: 0]) +
                    ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16])));
            }
        }
        CV_DOTUP_SC_H {
            encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15:0]) +
                    ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][15:0])));
            }
        }
        CV_DOTUP_SCI_H {
            encoding: 5'b10000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (unsigned)((unsigned<16>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:16] * (unsigned)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_DOTUP_B {
            encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][ 7: 0]) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][15: 8]) +
                    ((unsigned)X[rs1][23:16] * (unsigned)X[rs2][23:16]) +
                    ((unsigned)X[rs1][31:24] * (unsigned)X[rs2][31:24])));
            }
        }
        CV_DOTUP_SC_B {
            encoding: 5'b10000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][23:16] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][31:24] * (unsigned)X[rs2][7:0])));
            }
        }
        CV_DOTUP_SCI_B {
            encoding: 5'b10000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotup.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][23:16] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:24] * (unsigned)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_DOTUSP_H {
            encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
                    ((unsigned)X[rs1][31:16] * (signed)X[rs2][31:16])));
            }
        }
        CV_DOTUSP_SC_H {
            encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
                    ((unsigned)X[rs1][31:16] * (signed)X[rs2][15:0])));
            }
        }
        CV_DOTUSP_SCI_H {
            encoding: 5'b10001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_DOTUSP_B {
            encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
                    ((unsigned)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
                    ((unsigned)X[rs1][23:16] * (signed)X[rs2][23:16]) +
                    ((unsigned)X[rs1][31:24] * (signed)X[rs2][31:24])));
            }
        }
        CV_DOTUSP_SC_B {
            encoding: 5'b10001 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][23:16] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][31:24] * (signed)X[rs2][7:0])));
            }
        }
        CV_DOTUSP_SCI_B {
            encoding: 5'b10001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotusp.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    ((unsigned)X[rs1][ 7: 0] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][15: 8] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][23:16] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:24] * (signed)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_DOTSP_H {
            encoding: 5'b10010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
                    ((signed)X[rs1][31:16] * (signed)X[rs2][31:16])));
            }
        }
        CV_DOTSP_SC_H {
            encoding: 5'b10010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
                    ((signed)X[rs1][31:16] * (signed)X[rs2][15:0])));
            }
        }
        CV_DOTSP_SCI_H {
            encoding: 5'b10010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
                    ((signed)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_DOTSP_B {
            encoding: 5'b10010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
                    ((signed)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
                    ((signed)X[rs1][23:16] * (signed)X[rs2][23:16]) +
                    ((signed)X[rs1][31:24] * (signed)X[rs2][31:24])));
            }
        }
        CV_DOTSP_SC_B {
            encoding: 5'b10010 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][23:16] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][31:24] * (signed)X[rs2][7:0])));
            }
        }
        CV_DOTSP_SCI_B {
            encoding: 5'b10010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.dotsp.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    ((signed)X[rs1][ 7: 0] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][15: 8] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][23:16] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][31:24] * (signed)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_SDOTUP_H {
            encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15: 0]) +
                    ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][31:16])));
            }
        }
        CV_SDOTUP_SC_H {
            encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (unsigned)X[rs2][15:0]) +
                    ((unsigned)X[rs1][31:16] * (unsigned)X[rs2][15:0])));
            }
        }
        CV_SDOTUP_SCI_H {
            encoding: 5'b10011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (unsigned)((unsigned<16>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:16] * (unsigned)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_SDOTUP_B {
            encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][ 7: 0]) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][15: 8]) +
                    ((unsigned)X[rs1][23:16] * (unsigned)X[rs2][23:16]) +
                    ((unsigned)X[rs1][31:24] * (unsigned)X[rs2][31:24])));
            }
        }
        CV_SDOTUP_SC_B {
            encoding: 5'b10011 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][23:16] * (unsigned)X[rs2][7:0]) +
                    ((unsigned)X[rs1][31:24] * (unsigned)X[rs2][7:0])));
            }
        }
        CV_SDOTUP_SCI_B {
            encoding: 5'b10011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotup.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][15: 8] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][23:16] * (unsigned)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:24] * (unsigned)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_SDOTUSP_H {
            encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
                    ((unsigned)X[rs1][31:16] * (signed)X[rs2][31:16])));
            }
        }
        CV_SDOTUSP_SC_H {
            encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
                    ((unsigned)X[rs1][31:16] * (signed)X[rs2][15:0])));
            }
        }
        CV_SDOTUSP_SCI_H {
            encoding: 5'b10100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_SDOTUSP_B {
            encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
                    ((unsigned)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
                    ((unsigned)X[rs1][23:16] * (signed)X[rs2][23:16]) +
                    ((unsigned)X[rs1][31:24] * (signed)X[rs2][31:24])));
            }
        }
        CV_SDOTUSP_SC_B {
            encoding: 5'b10100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][23:16] * (signed)X[rs2][7:0]) +
                    ((unsigned)X[rs1][31:24] * (signed)X[rs2][7:0])));
            }
        }
        CV_SDOTUSP_SCI_B {
            encoding: 5'b10100 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotusp.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((
                    X[rd] + 
                    ((unsigned)X[rs1][ 7: 0] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][15: 8] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][23:16] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((unsigned)X[rs1][31:24] * (signed)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_SDOTSP_H {
            encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0]) +
                    ((signed)X[rs1][31:16] * (signed)X[rs2][31:16])));
            }
        }
        CV_SDOTSP_SC_H {
            encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][15: 0] * (signed)X[rs2][15:0]) +
                    ((signed)X[rs1][31:16] * (signed)X[rs2][15:0])));
            }
        }
        CV_SDOTSP_SCI_H {
            encoding: 5'b10101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][15: 0] * (signed)((unsigned<16>)((signed)Imm6))) +
                    ((signed)X[rs1][31:16] * (signed)((unsigned<16>)((signed)Imm6)))));
            }
        }
        CV_SDOTSP_B {
            encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][ 7: 0] * (signed)X[rs2][ 7: 0]) +
                    ((signed)X[rs1][15: 8] * (signed)X[rs2][15: 8]) +
                    ((signed)X[rs1][23:16] * (signed)X[rs2][23:16]) +
                    ((signed)X[rs1][31:24] * (signed)X[rs2][31:24])));
            }
        }
        CV_SDOTSP_SC_B {
            encoding: 5'b10101 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][ 7: 0] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][15: 8] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][23:16] * (signed)X[rs2][7:0]) +
                    ((signed)X[rs1][31:24] * (signed)X[rs2][7:0])));
            }
        }
        CV_SDOTSP_SCI_B {
            encoding: 5'b10101 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sdotsp.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) X[rd] = (unsigned<32>)((signed)(
                    X[rd] + 
                    ((signed)X[rs1][ 7: 0] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][15: 8] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][23:16] * (signed)((unsigned<8>)((signed)Imm6))) +
                    ((signed)X[rs1][31:24] * (signed)((unsigned<8>)((signed)Imm6)))));
            }
        }
        CV_SHUFFLE_H {
            encoding: 5'b11000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffle.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = X[rs1][(X[rs2][15: 0][0]*16) + 15 : (X[rs2][15: 0][0]*16) ];
                    X[rd][31:16] = X[rs1][(X[rs2][31:16][0]*16) + 15 : (X[rs2][31:16][0]*16) ];
                }
            }
        }
        CV_SHUFFLE_SCI_H {
            encoding: 5'b11000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffle.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = X[rs1][(Imm6[0]*16) + 15 : (Imm6[0]*16) ];
                    X[rd][31:16] = X[rs1][(Imm6[1]*16) + 15 : (Imm6[1]*16) ];
                }
            }
        }
        CV_SHUFFLE_B {
            encoding: 5'b11000 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffle.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = X[rs1][(X[rs2][ 7: 0][1:0]*8) + 7 : (X[rs2][ 7: 0][1:0]*8) ];
                    X[rd][15: 8] = X[rs1][(X[rs2][15: 8][1:0]*8) + 7 : (X[rs2][15: 8][1:0]*8) ];
                    X[rd][23:16] = X[rs1][(X[rs2][23:16][1:0]*8) + 7 : (X[rs2][23:16][1:0]*8) ];
                    X[rd][31:24] = X[rs1][(X[rs2][31:24][1:0]*8) + 7 : (X[rs2][31:24][1:0]*8) ];
                }
            }
        }
        CV_SHUFFLEI0_SCI_B {
            encoding: 5'b11000 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffleI0.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ];
                    X[rd][15: 8] = X[rs1][Imm6[3:2]*8 + 7 : Imm6[3:2]*8 ];
                    X[rd][23:16] = X[rs1][Imm6[5:4]*8 + 7 : Imm6[5:4]*8 ];
                    X[rd][31:24] = X[rs1][ 7: 0];
                }
            }
        }
        CV_SHUFFLEI1_SCI_B {
            encoding: 5'b11001 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffleI1.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ];
                    X[rd][15: 8] = X[rs1][Imm6[3:2]*8 + 7 : Imm6[3:2]*8 ];
                    X[rd][23:16] = X[rs1][Imm6[5:4]*8 + 7 : Imm6[5:4]*8 ];
                    X[rd][31:24] = X[rs1][15: 8];
                }
            }
        }
        CV_SHUFFLEI2_SCI_B {
            encoding: 5'b11010 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffleI2.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ];
                    X[rd][15: 8] = X[rs1][Imm6[3:2]*8 + 7 : Imm6[3:2]*8 ];
                    X[rd][23:16] = X[rs1][Imm6[5:4]*8 + 7 : Imm6[5:4]*8 ];
                    X[rd][31:24] = X[rs1][23:16];
                }
            }
        }
        CV_SHUFFLEI3_SCI_B {
            encoding: 5'b11011 :: 1'b0 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffleI3.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = X[rs1][Imm6[1:0]*8 + 7 : Imm6[1:0]*8 ];
                    X[rd][15: 8] = X[rs1][Imm6[3:2]*8 + 7 : Imm6[3:2]*8 ];
                    X[rd][23:16] = X[rs1][Imm6[5:4]*8 + 7 : Imm6[5:4]*8 ];
                    X[rd][31:24] = X[rs1][31:24];
                }
            }
        }
        CV_SHUFFLE2_H {
            encoding: 5'b11100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffle2.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (X[rs2][15: 0][1] ? X[rs1] : X[rd])[(X[rs2][15: 0][0]*16) + 15 : (X[rs2][15: 0][0]*16) ];
                    X[rd][31:16] = (X[rs2][31:16][1] ? X[rs1] : X[rd])[(X[rs2][31:16][0]*16) + 15 : (X[rs2][31:16][0]*16) ];
                }
            }
        }
        CV_SHUFFLE2_B {
            encoding: 5'b11100 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.shuffle2.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (X[rs2][ 7: 0][2] ? X[rs1] : X[rd])[(X[rs2][ 7: 0][1:0]*8) + 7 : (X[rs2][ 7: 0][1:0]*8) ];
                    X[rd][15: 8] = (X[rs2][15: 8][2] ? X[rs1] : X[rd])[(X[rs2][15: 8][1:0]*8) + 7 : (X[rs2][15: 8][1:0]*8) ];
                    X[rd][23:16] = (X[rs2][23:16][2] ? X[rs1] : X[rd])[(X[rs2][23:16][1:0]*8) + 7 : (X[rs2][23:16][1:0]*8) ];
                    X[rd][31:24] = (X[rs2][31:24][2] ? X[rs1] : X[rd])[(X[rs2][31:24][1:0]*8) + 7 : (X[rs2][31:24][1:0]*8) ];
                }
            }
        }
        CV_PACK {
            encoding: 5'b11110 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.pack", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = X[rs1][15: 0];
                    X[rd][15: 0] = X[rs2][15: 0];
                }
            }
        }
        CV_PACK_H {
            encoding: 5'b11110 :: 1'b0 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.pack.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = X[rs1][31:16];
                    X[rd][15: 0] = X[rs2][31:16];
                }
            }
        }
        CV_PACKHI_B {
            encoding: 5'b11111 :: 1'b0 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.packhi.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:24] = X[rs1][ 7: 0];
                    X[rd][23:16] = X[rs2][ 7: 0];
                }
            }
        }
        CV_PACKLO_B {
            encoding: 5'b11111 :: 1'b0 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.packlo.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 8] = X[rs1][ 7: 0];
                    X[rd][ 7: 0] = X[rs2][ 7: 0];
                }
            }
        }
        // SOURCE FILE: instr_srcs/XCoreVSIMD_Comparison.txt
        CV_CMPEQ_H {
            encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == X[rs2][31:16]));
                }
            }
        }
        CV_CMPEQ_SC_H {
            encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == X[rs2][15:0]));
                }
            }
        }
        CV_CMPEQ_SCI_H {
            encoding: 5'b00000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] == ((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] == ((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPEQ_B {
            encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == X[rs2][31:24]));
                }
            }
        }
        CV_CMPEQ_SC_B {
            encoding: 5'b00000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == X[rs2][7:0]));
                }
            }
        }
        CV_CMPEQ_SCI_B {
            encoding: 5'b00000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpeq.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] == ((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] == ((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] == ((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] == ((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPNE_H {
            encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != X[rs2][31:16]));
                }
            }
        }
        CV_CMPNE_SC_H {
            encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != X[rs2][15:0]));
                }
            }
        }
        CV_CMPNE_SCI_H {
            encoding: 5'b00001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)(X[rs1][15: 0] != ((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)(X[rs1][31:16] != ((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPNE_B {
            encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != X[rs2][31:24]));
                }
            }
        }
        CV_CMPNE_SC_B {
            encoding: 5'b00001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != X[rs2][7:0]));
                }
            }
        }
        CV_CMPNE_SCI_B {
            encoding: 5'b00001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpne.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)(X[rs1][ 7: 0] != ((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)(X[rs1][15: 8] != ((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)(X[rs1][23:16] != ((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)(X[rs1][31:24] != ((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPGT_H {
            encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)X[rs2][31:16]));
                }
            }
        }
        CV_CMPGT_SC_H {
            encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)X[rs2][15:0]));
                }
            }
        }
        CV_CMPGT_SCI_H {
            encoding: 5'b00010 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] > (signed)((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] > (signed)((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPGT_B {
            encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)X[rs2][31:24]));
                }
            }
        }
        CV_CMPGT_SC_B {
            encoding: 5'b00010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)X[rs2][7:0]));
                }
            }
        }
        CV_CMPGT_SCI_B {
            encoding: 5'b00010 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgt.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] > (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] > (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] > (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] > (signed)((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPGE_H {
            encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)X[rs2][31:16]));
                }
            }
        }
        CV_CMPGE_SC_H {
            encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)X[rs2][15:0]));
                }
            }
        }
        CV_CMPGE_SCI_H {
            encoding: 5'b00011 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] >= (signed)((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] >= (signed)((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPGE_B {
            encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)X[rs2][31:24]));
                }
            }
        }
        CV_CMPGE_SC_B {
            encoding: 5'b00011 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)X[rs2][7:0]));
                }
            }
        }
        CV_CMPGE_SCI_B {
            encoding: 5'b00011 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpge.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] >= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] >= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] >= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] >= (signed)((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPLT_H {
            encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)X[rs2][31:16]));
                }
            }
        }
        CV_CMPLT_SC_H {
            encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)X[rs2][15:0]));
                }
            }
        }
        CV_CMPLT_SCI_H {
            encoding: 5'b00100 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] < (signed)((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] < (signed)((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPLT_B {
            encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)X[rs2][31:24]));
                }
            }
        }
        CV_CMPLT_SC_B {
            encoding: 5'b00100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)X[rs2][7:0]));
                }
            }
        }
        CV_CMPLT_SCI_B {
            encoding: 5'b00100 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmplt.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] < (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] < (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] < (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] < (signed)((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPLE_H {
            encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)X[rs2][31:16]));
                }
            }
        }
        CV_CMPLE_SC_H {
            encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)X[rs2][15:0]));
                }
            }
        }
        CV_CMPLE_SCI_H {
            encoding: 5'b00101 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((signed)X[rs1][15: 0] <= (signed)((unsigned<16>)((signed)Imm6))));
                    X[rd][31:16] = (unsigned<16>)((signed)((signed)X[rs1][31:16] <= (signed)((unsigned<16>)((signed)Imm6))));
                }
            }
        }
        CV_CMPLE_B {
            encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)X[rs2][31:24]));
                }
            }
        }
        CV_CMPLE_SC_B {
            encoding: 5'b00101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)X[rs2][7:0]));
                }
            }
        }
        CV_CMPLE_SCI_B {
            encoding: 5'b00101 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmple.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((signed)X[rs1][ 7: 0] <= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][15: 8] = (unsigned<8>)((signed)((signed)X[rs1][15: 8] <= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][23:16] = (unsigned<8>)((signed)((signed)X[rs1][23:16] <= (signed)((unsigned<8>)((signed)Imm6))));
                    X[rd][31:24] = (unsigned<8>)((signed)((signed)X[rs1][31:24] <= (signed)((unsigned<8>)((signed)Imm6))));
                }
            }
        }
        CV_CMPGTU_H {
            encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)X[rs2][31:16]));
                }
            }
        }
        CV_CMPGTU_SC_H {
            encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)X[rs2][15:0]));
                }
            }
        }
        CV_CMPGTU_SCI_H {
            encoding: 5'b00110 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] > (unsigned)((unsigned<16>)Imm6)));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] > (unsigned)((unsigned<16>)Imm6)));
                }
            }
        }
        CV_CMPGTU_B {
            encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)X[rs2][31:24]));
                }
            }
        }
        CV_CMPGTU_SC_B {
            encoding: 5'b00110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)X[rs2][7:0]));
                }
            }
        }
        CV_CMPGTU_SCI_B {
            encoding: 5'b00110 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgtu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] > (unsigned)((unsigned<8>)Imm6)));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] > (unsigned)((unsigned<8>)Imm6)));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] > (unsigned)((unsigned<8>)Imm6)));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] > (unsigned)((unsigned<8>)Imm6)));
                }
            }
        }
        CV_CMPGEU_H {
            encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)X[rs2][31:16]));
                }
            }
        }
        CV_CMPGEU_SC_H {
            encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)X[rs2][15:0]));
                }
            }
        }
        CV_CMPGEU_SCI_H {
            encoding: 5'b00111 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] >= (unsigned)((unsigned<16>)Imm6)));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] >= (unsigned)((unsigned<16>)Imm6)));
                }
            }
        }
        CV_CMPGEU_B {
            encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)X[rs2][31:24]));
                }
            }
        }
        CV_CMPGEU_SC_B {
            encoding: 5'b00111 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)X[rs2][7:0]));
                }
            }
        }
        CV_CMPGEU_SCI_B {
            encoding: 5'b00111 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpgeu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] >= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] >= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] >= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] >= (unsigned)((unsigned<8>)Imm6)));
                }
            }
        }
        CV_CMPLTU_H {
            encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)X[rs2][31:16]));
                }
            }
        }
        CV_CMPLTU_SC_H {
            encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)X[rs2][15:0]));
                }
            }
        }
        CV_CMPLTU_SCI_H {
            encoding: 5'b01000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] < (unsigned)((unsigned<16>)Imm6)));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] < (unsigned)((unsigned<16>)Imm6)));
                }
            }
        }
        CV_CMPLTU_B {
            encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)X[rs2][31:24]));
                }
            }
        }
        CV_CMPLTU_SC_B {
            encoding: 5'b01000 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)X[rs2][7:0]));
                }
            }
        }
        CV_CMPLTU_SCI_B {
            encoding: 5'b01000 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpltu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] < (unsigned)((unsigned<8>)Imm6)));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] < (unsigned)((unsigned<8>)Imm6)));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] < (unsigned)((unsigned<8>)Imm6)));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] < (unsigned)((unsigned<8>)Imm6)));
                }
            }
        }
        CV_CMPLEU_H {
            encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)X[rs2][15: 0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)X[rs2][31:16]));
                }
            }
        }
        CV_CMPLEU_SC_H {
            encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.sc.h", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)X[rs2][15:0]));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)X[rs2][15:0]));
                }
            }
        }
        CV_CMPLEU_SCI_H {
            encoding: 5'b01001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.sci.h", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (unsigned<16>)((signed)((unsigned)X[rs1][15: 0] <= (unsigned)((unsigned<16>)Imm6)));
                    X[rd][31:16] = (unsigned<16>)((signed)((unsigned)X[rs1][31:16] <= (unsigned)((unsigned<16>)Imm6)));
                }
            }
        }
        CV_CMPLEU_B {
            encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)X[rs2][ 7: 0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)X[rs2][15: 8]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)X[rs2][23:16]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)X[rs2][31:24]));
                }
            }
        }
        CV_CMPLEU_SC_B {
            encoding: 5'b01001 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.sc.b", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)X[rs2][7:0]));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)X[rs2][7:0]));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)X[rs2][7:0]));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)X[rs2][7:0]));
                }
            }
        }
        CV_CMPLEU_SCI_B {
            encoding: 5'b01001 :: 1'b1 :: Imm6[0:0] :: Imm6[5:1] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cmpleu.sci.b", "{name(rd)}, {name(rs1)}, {Imm6}" };
            behavior: {
                if (rd != 0) {
                    X[rd][ 7: 0] = (unsigned<8>)((signed)((unsigned)X[rs1][ 7: 0] <= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][15: 8] = (unsigned<8>)((signed)((unsigned)X[rs1][15: 8] <= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][23:16] = (unsigned<8>)((signed)((unsigned)X[rs1][23:16] <= (unsigned)((unsigned<8>)Imm6)));
                    X[rd][31:24] = (unsigned<8>)((signed)((unsigned)X[rs1][31:24] <= (unsigned)((unsigned<8>)Imm6)));
                }
            }
        }
        // SOURCE FILE: instr_srcs/XCoreVSIMD_Complex.txt
        CV_CPLXMUL_R {
            encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.r", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 15)[15:0];
                }
            }
        }
        CV_CPLXMUL_R_DIV2 {
            encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.r.div2", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 16)[15:0];
                }
            }
        }
        CV_CPLXMUL_R_DIV4 {
            encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.r.div4", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 17)[15:0];
                }
            }
        }
        CV_CPLXMUL_R_DIV8 {
            encoding: 5'b01010 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.r.div8", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = (((signed)X[rs1][15: 0] * (signed)X[rs2][15: 0] - (signed)X[rs1][31:16] * (signed)X[rs2][31:16]) >> 18)[15:0];
                }
            }
        }
        CV_CPLXMUL_I {
            encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.i", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = (((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 15)[15:0];
                }
            }
        }
        CV_CPLXMUL_I_DIV2 {
            encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.i.div2", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = (((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 16)[15:0];
                }
            }
        }
        CV_CPLXMUL_I_DIV4 {
            encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.i.div4", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = (((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 17)[15:0];
                }
            }
        }
        CV_CPLXMUL_I_DIV8 {
            encoding: 5'b01010 :: 1'b1 :: 1'b1 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxmul.i.div8", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = (((signed)X[rs1][15: 0] * (signed)X[rs2][31:16] - (signed)X[rs1][31:16] * (signed)X[rs2][15: 0]) >> 18)[15:0];
                }
            }
        }
        CV_CPLXCONJ {
            encoding: 5'b01011 :: 1'b1 :: 1'b0 :: 5'b00000 :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.cplxconj", "{name(rd)}, {name(rs1)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = X[rs1][15: 0];
                    X[rd][31:16] = (-X[rs1][31:16])[15:0];
                }
            }
        }
        CV_SUBROTMJ {
            encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.subrotmj", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = (X[rs2][15: 0] - X[rs1][31:16])[15:0];
                }
            }
        }
        CV_SUBROTMJ_DIV2 {
            encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.subrotmj.div2", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = ((signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 1)[15:0];
                }
            }
        }
        CV_SUBROTMJ_DIV4 {
            encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.subrotmj.div4", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = ((signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 2)[15:0];
                }
            }
        }
        CV_SUBROTMJ_DIV8 {
            encoding: 5'b01100 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.subrotmj.div8", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][31:16] = ((signed)((X[rs2][15: 0] - X[rs1][31:16])[15:0]) >> 3)[15:0];
                }
            }
        }
        CV_ADD_DIV2 {
            encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.div2", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 1)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 1)[15:0];
                }
            }
        }
        CV_ADD_DIV4 {
            encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.div4", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 2)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 2)[15:0];
                }
            }
        }
        CV_ADD_DIV8 {
            encoding: 5'b01101 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.add.div8", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] + X[rs2][15: 0]) >> 3)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] + X[rs2][31:16]) >> 3)[15:0];
                }
            }
        }
        CV_SUB_DIV2 {
            encoding: 5'b01110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.div2", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 1)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 1)[15:0];
                }
            }
        }
        CV_SUB_DIV4 {
            encoding: 5'b01110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.div4", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 2)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 2)[15:0];
                }
            }
        }
        CV_SUB_DIV8 {
            encoding: 5'b01110 :: 1'b1 :: 1'b0 :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1111011;
            assembly: {"cv.sub.div8", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd][15: 0] = ((signed)(X[rs1][15: 0] - X[rs2][15: 0]) >> 3)[15:0];
                    X[rd][31:16] = ((signed)(X[rs1][31:16] - X[rs2][31:16]) >> 3)[15:0];
                }
            }
        }
    }
}
