import "../rv_base/RISCVBase.core_desc"

InstructionSet XCoreV64Mem extends RISCVBase {
    instructions {
        // ?
        CV64_LB_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lb", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<8> res = (signed<8>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LBU_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lbu", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LH_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lh", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<16> res = (signed<16>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LHU_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lhu", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LW_ri_inc {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lw", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LWU_ri_inc {  // NEW
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.lwu", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LD_ri_inc {  // NEW
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011; // TODO
            assembly: {"cv64.ld", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if (rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)imm12;
            }
        }
        CV64_LB_rr_inc {
            encoding: 7'b0000000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lb", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<8> res = (signed<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LBU_rr_inc {
            encoding: 7'b0001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lbu", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LH_rr_inc {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lh", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<16> res = (signed<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LHU_rr_inc {
            encoding: 7'b0001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lhu", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LW_rr_inc {
            encoding: 7'b0000010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lw", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LWU_rr_inc {  // NEW
            encoding: 7'b0000010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lwu", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LD_rr_inc {  // NEW
            encoding: 7'b0000010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.ld", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1];  // TODO: signed?
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
                X[rs1] += (signed)X[rs2];
            }
        }
        CV64_LB_rr {
            encoding: 7'b0000100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lb", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<8> res = (signed<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV64_LBU_rr {
            encoding: 7'b0001100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lbu", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                unsigned<8> res = (unsigned<8>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV64_LH_rr {
            encoding: 7'b0000101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lh", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<16> res = (signed<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV64_LHU_rr {
            encoding: 7'b0001101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lhu", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                unsigned<16> res = (unsigned<16>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV64_LW_rr {
            encoding: 7'b0000110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.lh", "{name(rd)}, {name(rs2)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> load_address = X[rs1] + X[rs2];  // TODO: signed?
                signed<XLEN> res = (signed<XLEN>)MEM[load_address];
                if(rd != 0) X[rd] = (unsigned<XLEN>)res;
            }
        }
        CV64_SB_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: imm12[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sb", "{name(rs2)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<8>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV64_SH_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: imm12[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sh", "{name(rs2)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<16>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV64_SW_ri_inc {
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: imm12[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sw", "{name(rs2)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<XLEN>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV64_SD_ri_inc {  // NEW
            encoding: imm12[11:5] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: imm12[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sd", "{name(rs2)}, {imm12}({name(rs1)}!)"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];
                MEM[store_address] = (signed<XLEN>)X[rs2];
                X[rs1] += (signed)imm12;
            }
        }
        CV64_SB_rr_inc {
            encoding: 7'b0010000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sb", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
                                MEM[store_address] = (signed<8>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV64_SH_rr_inc {
            encoding: 7'b0010001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sh", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
                                MEM[store_address] = (signed<16>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV64_SW_rr_inc {
            encoding: 7'b0010010 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sw", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1];  // TODO: signed?
                                MEM[store_address] = (signed<XLEN>)X[rs2];
                X[rs1] += (signed)X[rs3];
            }
        }
        CV64_SB_rr {
            encoding: 7'b0010100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sb", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
                                MEM[store_address] = (signed<8>)X[rs2];
            }
        }
        CV64_SH_rr {
            encoding: 7'b0010101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sh", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
                                MEM[store_address] = (signed<16>)X[rs2];
            }
        }
        CV64_SW_rr {
            encoding: 7'b0010110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rs3[4:0] :: 7'b0101011; // TODO
            assembly: {"cv64.sw", "{name(rs2)}, {name(rs3)}({name(rs1)})"};
            behavior: {
                unsigned<XLEN> store_address = X[rs1] + X[rs3];  // TODO: signed?
                                MEM[store_address] = (signed<XLEN>)X[rs2];
            }
        }
    }
}
