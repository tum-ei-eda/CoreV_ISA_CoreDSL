import "../rv_base/RISCVBase.core_desc"

InstructionSet XCoreVMac extends RISCVBase {
    functions {
        extern unsigned<32> fmac_s(unsigned<32>, unsigned<32>);
        extern unsigned<32> fmsu_s(unsigned<32>, unsigned<32>);
    }
    instructions {
        // 32-Bit x 32-Bit Multiplication Operations (Signed)
        CVF_MAC {
            encoding: 7'b1001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.mac", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: {
                F[rd] = fmac_s(F[rd], F[rs1], F[rs2]);
            }
        }
        CVF_MSU {
            encoding: 7'b1001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;  // TODO
            assembly: {"cvf.msu", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: {
                F[rd] = fmsu_s(F[rd], F[rs1], F[rs2]);
            }
        }
        // 16-Bit x 16-Bit Multiplication
        // CV_MULUN {
        //     encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULHHUN {
        //     encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULSN {
        //     encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULHHSN {
        //     encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULURN {
        //     encoding: 2'b10:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULHHURN {
        //     encoding: 2'b11:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULSRN {
        //     encoding: 2'b10:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MULHHSRN {
        //     encoding: 2'b11:: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b100 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // // 16-Bit x 16-Bit Multiply-Accumulate
        // CV_MACUN {
        //     encoding: 2'b00 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACHHUN {
        //     encoding: 2'b01 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACSN {
        //     encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //       signed<32> result = ((signed)X[rs1][15:0] * (signed)X[rs2][15:0] + (signed)X[rd]) >> Is3;
        //       if(rd != 0) X[rd] = result[31:0];
        //     }
        // }
        // CV_MACHHSN {
        //     encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACURN {
        //     encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACHHURN {
        //     encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b110 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACSRN {
        //     encoding: 2'b10 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
        // CV_MACHHSRN {
        //     encoding: 2'b11 :: Is3[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b111 :: rd[4:0] :: 7'b1011011;
        //     assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}, {Is3}";
        //     behavior: {
        //     }
        // }
    }
}
